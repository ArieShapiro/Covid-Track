{"version":3,"sources":["service/http.ts","components/TableView.tsx","components/ChartView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getData","url","a","axios","get","data","Global","Countries","useStyles","makeStyles","table","minWidth","TableView","dataToView","globalData","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","Box","fontWeight","align","TableBody","map","row","scope","Country","TotalConfirmed","TotalDeaths","TotalRecovered","length","papar","width","margin","display","iconBtn","height","ChartView","isGlobalChart","useState","pageIdx","setPageIdx","handleNav","direction","prev","style","argument","value","text","valueField","argumentField","IconButton","onClick","slice","c","country","active","deaths","recovered","name","position","topBar","title","navSection","justifyContent","navBtns","color","App","state","setState","setDataToView","isTable","setIsTable","setIsGlobalChart","useEffect","then","res","AppBar","Toolbar","Typography","variant","LinearProgress","Autocomplete","onInputChange","e","target","textContent","filtered","filter","toLowerCase","handleInputChange","options","getOptionLabel","option","renderInput","params","TextField","label","renderOption","input","matches","match","parts","parse","part","index","highlight","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.777ddb2f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getData = async (url: string): Promise<State> => {\r\n\tconst { data } = await axios.get(url);\r\n\r\n\tconst { Global, Countries } = data;\r\n\r\n\treturn {\r\n\t\tGlobal,\r\n\t\tCountries,\r\n\t};\r\n};\r\n","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n\ttable: {\r\n\t\tminWidth: 650,\r\n\t},\r\n});\r\n\r\nexport interface TableViewProps {\r\n\tdataToView: Country[] | null | undefined;\r\n\tglobalData: Global;\r\n}\r\n\r\nconst TableView: React.FC<TableViewProps> = ({ dataToView, globalData }) => {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<TableContainer component={Paper}>\r\n\t\t\t<Table className={classes.table} aria-label=\"simple table\">\r\n\t\t\t\t<TableHead>\r\n\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t<Box fontWeight=\"fontWeightBold\">Country</Box>\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"right\">\r\n\t\t\t\t\t\t\t<Box fontWeight=\"fontWeightBold\">Active Cases</Box>\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"right\">\r\n\t\t\t\t\t\t\t<Box fontWeight=\"fontWeightBold\">Deaths</Box>\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"right\">\r\n\t\t\t\t\t\t\t<Box fontWeight=\"fontWeightBold\">Recoveries</Box>\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t</TableHead>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{dataToView?.map((row) => (\r\n\t\t\t\t\t\t<TableRow key={row.Country}>\r\n\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\r\n\t\t\t\t\t\t\t\t{row.Country}\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\">{row.TotalConfirmed}</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\">{row.TotalDeaths}</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\">{row.TotalRecovered}</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{dataToView && dataToView.length > 1 && (\r\n\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\r\n\t\t\t\t\t\t\t\t<Box fontWeight=\"fontWeightBold\">Total</Box>\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\">\r\n\t\t\t\t\t\t\t\t<Box fontWeight=\"fontWeightBold\">{globalData.TotalConfirmed}</Box>\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\">\r\n\t\t\t\t\t\t\t\t<Box fontWeight=\"fontWeightBold\">{globalData.TotalDeaths}</Box>\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t<TableCell align=\"right\">\r\n\t\t\t\t\t\t\t\t<Box fontWeight=\"fontWeightBold\">{globalData.TotalRecovered}</Box>\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t);\r\n};\r\n\r\nexport default TableView;\r\n","import React, { useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n\tChart,\r\n\tBarSeries,\r\n\tTitle,\r\n\tArgumentAxis,\r\n\tValueAxis,\r\n\tLineSeries,\r\n\tLegend,\r\n} from '@devexpress/dx-react-chart-material-ui';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\n\r\nconst useStyles = makeStyles({\r\n\tpapar: {\r\n\t\twidth: '500px',\r\n\t\tmargin: 'auto',\r\n\t\tdisplay: 'flex',\r\n\t},\r\n\ticonBtn: {\r\n\t\theight: '50px',\r\n\t},\r\n});\r\n\r\nexport interface ChartViewProps {\r\n\tdataToView: Country[] | null | undefined;\r\n\tglobalData: Global;\r\n\tisGlobalChart: boolean;\r\n}\r\n\r\nconst ChartView: React.FC<ChartViewProps> = ({ dataToView, globalData, isGlobalChart }) => {\r\n\tconst classes = useStyles();\r\n\tconst [pageIdx, setPageIdx] = useState<number>(0);\r\n\r\n\tconst handleNav = (direction: string) => {\r\n\t\tif (direction === 'forward' && dataToView && pageIdx <= dataToView.length - 8) {\r\n\t\t\tsetPageIdx((prev) => prev + 7);\r\n\t\t} else if (pageIdx >= 7) {\r\n\t\t\tsetPageIdx((prev) => prev - 7);\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{isGlobalChart ? (\r\n\t\t\t\t<Paper className={classes.papar}>\r\n\t\t\t\t\t<div style={{ margin: 'auto' }}>\r\n\t\t\t\t\t\t<Chart\r\n\t\t\t\t\t\t\twidth={300}\r\n\t\t\t\t\t\t\tdata={[\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\targument: 'Active Cases',\r\n\t\t\t\t\t\t\t\t\tvalue: globalData.TotalConfirmed,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\targument: 'Deaths',\r\n\t\t\t\t\t\t\t\t\tvalue: globalData.TotalDeaths,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\targument: 'Recovered',\r\n\t\t\t\t\t\t\t\t\tvalue: globalData.TotalRecovered,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ArgumentAxis />\r\n\t\t\t\t\t\t\t<ValueAxis />\r\n\t\t\t\t\t\t\t<Title text=\"Global Data\" />\r\n\r\n\t\t\t\t\t\t\t<BarSeries valueField=\"value\" argumentField=\"argument\" />\r\n\t\t\t\t\t\t</Chart>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Paper>\r\n\t\t\t) : (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{dataToView && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t{dataToView.length > 1 ? (\r\n\t\t\t\t\t\t\t\t<div style={{ display: 'flex' }}>\r\n\t\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\thandleNav('back');\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<ArrowBackIcon />\r\n\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t<Paper className={classes.papar} style={{width:'1000px'}}>\r\n\t\t\t\t\t\t\t\t\t\t<Chart\r\n\t\t\t\t\t\t\t\t\t\t\twidth={1000}\r\n\t\t\t\t\t\t\t\t\t\t\tdata={dataToView?.slice(pageIdx, pageIdx + 8).map((c: Country) => ({\r\n\t\t\t\t\t\t\t\t\t\t\t\tcountry: c.Country,\r\n\t\t\t\t\t\t\t\t\t\t\t\tactive: c.TotalConfirmed,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeaths: c.TotalDeaths,\r\n\t\t\t\t\t\t\t\t\t\t\t\trecovered: c.TotalRecovered,\r\n\t\t\t\t\t\t\t\t\t\t\t}))}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<ArgumentAxis />\r\n\t\t\t\t\t\t\t\t\t\t\t<ValueAxis />\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<Title\r\n\t\t\t\t\t\t\t\t\t\t\t\ttext={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdataToView.length > 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? `${pageIdx + 1} - ${\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpageIdx + 8 >= dataToView.length\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? dataToView.length\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: pageIdx + 8\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  } of ${dataToView.length}`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: ``\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<LineSeries\r\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"Active Cases\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalueField=\"active\"\r\n\t\t\t\t\t\t\t\t\t\t\t\targumentField=\"country\"\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<LineSeries name=\"Deaths\" valueField=\"deaths\" argumentField=\"country\" />\r\n\t\t\t\t\t\t\t\t\t\t\t<LineSeries\r\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"Recovered\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalueField=\"recovered\"\r\n\t\t\t\t\t\t\t\t\t\t\t\targumentField=\"country\"\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<Legend position=\"bottom\" />\r\n\t\t\t\t\t\t\t\t\t\t</Chart>\r\n\t\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\thandleNav('forward');\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<ArrowForwardIcon />\r\n\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<Paper className={classes.papar}>\r\n\t\t\t\t\t\t\t\t\t<div style={{ margin: 'auto' }}>\r\n\t\t\t\t\t\t\t\t\t\t<Chart\r\n\t\t\t\t\t\t\t\t\t\t\twidth={300}\r\n\t\t\t\t\t\t\t\t\t\t\tdata={[\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\targument: 'Active Cases',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: dataToView[0].TotalConfirmed,\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\targument: 'Deaths',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: dataToView[0].TotalDeaths,\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\targument: 'Recovered',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: dataToView[0].TotalRecovered,\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<ArgumentAxis />\r\n\t\t\t\t\t\t\t\t\t\t\t<ValueAxis />\r\n\t\t\t\t\t\t\t\t\t\t\t<Title text={dataToView[0].Country} />\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<BarSeries valueField=\"value\" argumentField=\"argument\" />\r\n\t\t\t\t\t\t\t\t\t\t</Chart>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChartView;\r\n","import React, { useEffect, useState } from 'react';\n\nimport { getData } from './service/http';\nimport TableView from './components/TableView';\nimport ChartView from './components/ChartView';\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport BlurLinearIcon from '@material-ui/icons/BlurLinear';\nimport PublicIcon from '@material-ui/icons/Public';\n\nconst useStyles = makeStyles({\n\ttopBar: {\n\t\tmargin: 'auto',\n\t\tdisplay: 'flex',\n\t},\n\ttitle: {\n\t\tmargin: '0 10px',\n\t},\n\tnavSection: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'space-between',\n\t},\n\tnavBtns: {\n\t\tcolor: '#5d5d65',\n\t\tmargin: '20px 0',\n\t\twidth: '10vw',\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'space-evenly',\n\t},\n});\n\nfunction App() {\n\tconst classes = useStyles();\n\tconst [state, setState] = useState<State | null>(null);\n\tconst [dataToView, setDataToView] = useState<Country[] | null | undefined>(null);\n\tconst [isTable, setIsTable] = useState<boolean>(true);\n\tconst [isGlobalChart, setIsGlobalChart] = useState<boolean>(false);\n\n\tuseEffect(() => {\n\t\tgetData('https://api.covid19api.com/summary').then((res: State) => {\n\t\t\tsetState(res);\n\t\t\tsetDataToView(res.Countries);\n\t\t});\n\t}, []);\n\n\tconst handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n\t\tconst value: string = e.target.textContent || e.target.value;\n\n\t\tconst filtered =\n\t\t\tvalue &&\n\t\t\tstate?.Countries.filter((country: Country) => country.Country.toLowerCase() === value.toLowerCase());\n\n\t\tif (filtered && filtered.length) {\n\t\t\tsetDataToView(filtered);\n\t\t} else if (!value) {\n\t\t\tsetDataToView(state?.Countries);\n\t\t}\n\t};\n\n\tconst toggleGlobalChart = () => {\n\t\tsetIsGlobalChart((prev) => !prev);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<AppBar position=\"sticky\">\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<div className={classes.topBar}>\n\t\t\t\t\t\t<TrackChangesIcon />\n\t\t\t\t\t\t<Typography variant=\"subtitle1\" className={classes.title}>\n\t\t\t\t\t\t\tCOVID TRACK\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</div>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t{!state && <LinearProgress variant=\"indeterminate\" />}\n\t\t\t{state && dataToView && (\n\t\t\t\t<>\n\t\t\t\t\t<div className={classes.navSection}>\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\t\tonInputChange={(e: any) => {\n\t\t\t\t\t\t\t\thandleInputChange(e);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\toptions={state.Countries}\n\t\t\t\t\t\t\tgetOptionLabel={(option: Country) => option.Country}\n\t\t\t\t\t\t\trenderInput={(params: {}) => (\n\t\t\t\t\t\t\t\t<TextField {...params} label=\"Search country\" variant=\"outlined\" margin=\"normal\" />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\trenderOption={(option: Country, { input }: any) => {\n\t\t\t\t\t\t\t\tconst matches = match(option.Country, input);\n\t\t\t\t\t\t\t\tconst parts = parse(option.Country, matches);\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{parts.map((part, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n\t\t\t\t\t\t\t\t\t\t\t\t{part.text}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{!isTable && (\n\t\t\t\t\t\t\t<IconButton style={{ height: '50px', marginTop: '10px' }} onClick={toggleGlobalChart}>\n\t\t\t\t\t\t\t\t<PublicIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div className={classes.navBtns}>\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetIsTable(true);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<BlurLinearIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetIsTable(false);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<EqualizerIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{isTable ? (\n\t\t\t\t\t\t<TableView dataToView={dataToView} globalData={state.Global} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<ChartView dataToView={dataToView} globalData={state.Global} isGlobalChart={isGlobalChart}/>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}